 immutable objects - int, float, bool, str, tuple, complex
 mutable objects - list, set, dict

import
	строка указывает, что можно импортировать
	__all__ = ("get_price", "_valid_discount")

getattr
	отдает атрибут для функций и классов:
	getattr(functions, "plus", None)	<- returnfunctions.plus or None
	getattr(some_class, "a") 			<- return a from def __init__(self, a, b)
	

slices
	slice всегда создает копию
	[:n]			- первые n
	[-n:]			- последние n
	[n:]			- пропустить первые n
	[:-n]			- пропустить последние n
	[::2] 		 	- все четные элементы (0,2,4...)
	[1::2] 			- все нечетные элементы
	[::-1] 			- обратная последовательность
	[:] или [::] 	- копия
	del s[:]		- удаление содержимого			
	

set
	collected_account_ids = set()
	for arn in arns:
        matched = re.match(ARN_REGEX, arn)
		if matched is not None:
            account_id = matched.groupdict()["account_id"]
            collected_account_ids.add(account_id)
	
	a = set()
	a.discard(user)
	a.add(user)
	

context manager

	 import contextlib
	 @contextlib.contextmanager
	 def db_handler():
	 try:
			stop_database()
	 yield
	 finally:
		   start_database()
	 with db_handler():
		db_backup()
		

	 class dbhandler_decorator(contextlib.ContextDecorator):
		 def __enter__(self):
			stop_database()
			return self
			
		 def __exit__(self, ext_type, ex_value, ex_traceback):
			start_database()
	
	@dbhandler_decorator()
	def offline_backup():
		run("pg_dump database")

logging

	- main:
		from logging import getLogger, basicConfig, DEBUG, ERROR, FileHandler, StreamHandler
		logger = getLogger()
		FORMAT = '%(asctime)s : %(name)s : %(levelname)s : %(message)s'
		file_handler = FileHandler("data.log")
		file_handler.setLevel(DEBUG)
		console = StreamHandler()
		console.setLevel(ERROR)
		basicConfig(level=DEBUG, format=FORMAT, handlers=[file_handler, console])
	- other:
		from logging import getLogger
		logger = getLogger(__name__)
		
	- можно в конфиг:
		import logging.conf
		with open('logging.conf') as file:
			config = json.load(file)
		logging.config.dictConfig(config)
		logger = getLogger()


паттерны:
	- singleton: шаблон предоставления глобального доступа к состоянию. 
	Нужен для одной точки доступа к ресурсам/данным и для того, чтобы ресурсоемкие задачи сделать 1 раз.


линтеры:
	pylint.exe --ignore-paths=.\6.5\.venv .\6.5\
	

циклы:
	- если список пустой, не выпадать, при этом продолжить работу, если не пустой:
		for task in task or []:
		...


строки:
	- собирает лист в строку через разделитель
		",".join(list)


os path:
	from pathlib import Path

	root_path = Path(__file__).resolve().parents[0]
	print(root_path)
	config_path = root_path/'config'
	print(config_path)


регулярки:
	* сколько угодно вхождений
	+ одно и более вхождений
	? ноль или одно вхождение 


декораторы:
	- пример бенчмарка:
		def benchmark(func):
		import time
		
		def wrapper():
			start = time.time()
			func()
			end = time.time()
			print('[*] Время выполнения: {} секунд.'.format(end-start))
		return wrapper

		@benchmark
		def fetch_webpage():
			import requests
			webpage = requests.get('https://google.com')

		fetch_webpage()

None:
	- команду return None в конце тела функции писать не нужно — это делается автоматически
	- проверка на None (любые var проверятся на один и тот же None):
		if var is None:
	
	
Ссылки:
	- руководство по магическим методам: https://habr.com/ru/post/186608/
	- python и строки https://docs.python.org/3.9/library/string.html#formatstrings
	- python и теория множеств https://habr.com/ru/articles/516858/
	- JSON schema https://json-schema.org/understanding-json-schema
	- PyTest https://docs.pytest.org/en/6.2.x/index.html
	- python и SQLite https://proglib.io/p/samouchitel-po-python-dlya-nachinayushchih-chast-22-osnovy-raboty-s-sqlite-2023-06-15


Ролики:
	- https://www.youtube.com/@PythonRussian/videos