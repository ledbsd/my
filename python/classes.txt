- константы лучше хранить в Enum. а чтобы вызывать сразу их значения, переопределить:
	
	class ConstantType(Enum):
	def __get__(self, *args):
		return self.value
	
	class IntensityType(ConstantType):
		LOW = 'Low'
		MEDIUM = 'Medium'
		HIGH = 'High'
		EXTREME = 'Extreme'
	...
	if intensity == IntensityType.EXTREME:
	...

- декораторы:
	@classmethod
	@staticmethod
	
- переопределение:
	class WorkerDev(Worker):
	def __init__(self, name: str, profession: str, experience: int):
		super().__init__(name, profession, experience)
		
- наследование без аргумента:
	1. образовать родительский без аргумента, потомка с аргументом
	2. сделать родительский более гибким - например назначить аргументу параметр по умолчанию либо ""
	3. либо отказаться от переменных и сделать словарь атрибутов в главном родителе без рамок названий и пр. Затем при наследовании в нём будут храниться все параметры
	https://ru.stackoverflow.com/questions/897997/%D0%9D%D0%B0%D1%81%D0%BB%D0%B5%D0%B4%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D0%B5-%D0%B2-python-%D0%B1%D0%B5%D0%B7-%D0%B0%D1%80%D0%B3%D1%83%D0%BC%D0%B5%D0%BD%D1%82%D0%B0
	
- если есть логика заполнения аттрибутов, а также запрет создания новых, можно использовать:
	- правила в __init__
	- __getattr__ / __setattr__:
		FIELDS = (name, age)  
		def __setattr__(self, key, value):
			if key not in self.FIELDS:
				raise ...
			if key == 'name' and not 'value':
				raise ...
			if key == 'age' and ( value<1 or value>15 ):
				raise ...
			self.__dict__[key]=value
	- getter/setter
		__slots__ = (_name, _age) # но вообще-то он для уменьшения занимаемой памяти (превращает dict -> tuple)
		
		class Cat:
		def __init__(self, name):
			self.name = name (если есть setter иначе _name)
		
		@property
		def name(self):
			return self._name
	
		@name.setter
		def name(self, new_value):
			if len(new_value) <= 0 or not isinstance(new_value, str):
				raise ValueError("Имя должно быть непустой строкой")
			self._name = new_value
		! в __init__ надо вызывать уже setter, иначе проверку можно будет обойти при инициализации

- init уже вызывает setter!!!

class Coordinate:
    def __init__(self, lat: float, long: float) -> None:
        self._latitude = self._longitude = None
        self.latitude = lat
        self.longitude = long

    @property
    def latitude(self) -> float:
        return self._latitude

    @latitude.setter
    def latitude(self, lat_value: float) -> None:
        if lat_value not in range(-90, 90 + 1):
            raise ValueError(f"{lat_value} is an invalid value for latitude")
        self._latitude = lat_value

    @property
    def longitude(self) -> float:
        return self._longitude

    @longitude.setter
    def longitude(self, long_value: float) -> None:
        if long_value not in range(-180, 180 + 1):
            raise ValueError(f"{long_value} is an invalid value for longitude")
        self._longitude = long_value

- Можно ходить по всем классам одного родителя:

	class Event:
		def __init__(self, raw_data):
			self.raw_data = raw_data
		
		@staticmethod
		def meets_condition(event_data: dict) -> bool:
			return False
	
	class LoginEvent(Event):
		@staticmethod
		def meets_condition(event_data: dict):
			return (
				event_data["before"]["session"] == 0
				and event_data["after"]["session"] == 1
			)
		...
		
 class SystemMonitor:
    """Identify events that occurred in the system."""
	 def __init__(self, event_data):
			self.event_data = event_data
	 
	 def identify_event(self):
	 for event_cls in Event.__subclasses__():
		try:
			if event_cls.meets_condition(self.event_data):
			return event_cls(self.event_data)
		except KeyError:
			continue
		return UnknownEvent(self.event_data)
		
- свойства тоже могут быть классами:
	self._target = Syslog()